{% extends 'base.html.twig' %}

{% block title %}Liste des Posts{% endblock %}

{% block content %}
<div class="container-xl py-5"> {# Utilisation de container-xl pour un conteneur plus large #}
    <div class="container py-5"> {# Garde un conteneur classique √† l'int√©rieur pour plus de contr√¥le #}
        <h1 class="mb-4 text-center">Liste des Posts</h1>

        <div class="d-flex justify-content-between mb-4">
            <a href="{{ path('app_new_post') }}" class="btn btn-primary">
                <i class="fas fa-plus"></i> Nouveau Post
            </a>
        </div>

        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">{{ message }}</div>
        {% endfor %}

        {% if posts is defined and posts|length > 0 %}
            <div class="d-flex flex-column gap-4">
                {% for post in posts %}
                    <div class="col-lg-12 col-sm-6 wow fadeInUp" data-wow-delay="0.{{ loop.index * 2 }}s">
                        <div class="service-item text-center pt-3 post-card">
                            <div class="p-4">
                            {% if post.utilisateur %}
                             <h5 class="mb-2 text-primary">
                              Publi√© par : {{ post.utilisateur.prenom }} {{ post.utilisateur.nom }}
                               </h5>
         {% else %}
             <h5 class="mb-2 text-danger">Utilisateur inconnu</h5>
        {% endif %}
                                {% if post.image %}
                                    <img src="{{ asset('images/' ~ post.image) }}" 
                                         class="rounded post-image mb-3" style="width: 300px; height: 300px; object-fit: cover;">
                                {% endif %}
                                <p class="card-text">{{ post.contenu|slice(0, 100) ~ '...' }}</p>
                                <small class="text-muted">
                                    <strong>Cat√©gorie :</strong> {{ post.categorie }}<br>
                                    <strong>Post√© le :</strong> {{ post.dateCreation|date('d/m/Y H:i') }}<br>
                                     {{ post.likes }}  <strong>üëç </strong> 
                                       {{ post.dislikes }}<strong>üëé</strong> 
                                </small>

                               <div>
                    <button class="btn btn-sm btn-outline-secondary mt-2" onclick="toggleCommentaires({{ post.getIdPost() }})">
                        üí¨ Commentaires
                    </button>
                </div>

                <div id="commentaires-{{ post.idPost }}" style="display: none;" class="mt-3 text-start">
                  
                    <!-- Zone d‚Äôajout de commentaire -->
                 <form onsubmit="ajouterCommentaire(event, {{ post.idPost }})" class="mt-3">
                   <div class="mb-2">
<textarea class="form-control" id="contenu-commentaire-{{ post.idPost }}" rows="2" placeholder="√âcrire un commentaire..." required style="color: black !important; background-color: white;"></textarea>
                   </div>
                    <button type="submit" class="btn btn-sm btn-success">Ajouter</button> {# ‚úÖ Type correct #}
                </form>
                {% if post.commentaires|length > 0 %}
                     {% for commentaire in post.commentaires %}
    <div class="border rounded p-2 mb-2 position-relative" style="background-color: #4cc4d6;">
        {{ commentaire.contenu }}

        <!-- Trois points -->
        <div class="dropdown position-absolute top-0 end-0 me-2 mt-2">
            <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="dropdownMenuButton-{{ commentaire.idCommentaire }}" data-bs-toggle="dropdown" aria-expanded="false" style="background: transparent; border: none;">
                ‚ãÆ
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-{{ commentaire.idCommentaire }}">
                <li>
                     <a class="dropdown-item" href="{{ path('commentaire_edit', {'id': commentaire.idCommentaire}) }}" style="color: black !important;">Modifier</a>
                </li>
                <li>
                    <a class="dropdown-item text-danger" href="#" onclick="supprimerCommentaire({{ commentaire.idCommentaire }})"style="color: black !important;">Supprimer</a>
                </li>
            </ul>
        </div>
    </div>
{% endfor %}

                    
                    {% endif %}



                </div>
            </div>
                            </div>
                            <div class="card-footer bg-white d-flex justify-content-between">
                                <a href="{{ path('app_post_edit', {'id_post': post.getIdPost()}) }}" class="btn btn-warning btn-sm">
                                    <i class="fas fa-edit"></i> Modifier
                                </a>
                                <form method="post" action="{{ path('app_post_delete', {'id_post': post.getIdPost()}) }}" 
                                      onsubmit="return confirm('√ätes-vous s√ªr de vouloir supprimer ce post ?');">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ post.getIdPost()) }}">
                                    <button class="btn btn-danger btn-sm">
                                        <i class="fas fa-trash"></i> Supprimer
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="alert alert-info text-center">
                Aucun post trouv√© dans la base de donn√©es.
            </div>
        {% endif %}
    </div>
</div>
<script>
    function toggleCommentaires(postId) {
        var commentairesDiv = document.getElementById('commentaires-' + postId);
        if (commentairesDiv.style.display === 'none' || commentairesDiv.style.display === '') {
            commentairesDiv.style.display = 'block';
        } else {
            commentairesDiv.style.display = 'none';
        }
    }
</script>
<script>
    function ajouterCommentaire(event, postId) {
        event.preventDefault();

        const textarea = document.getElementById('contenu-commentaire-' + postId);
        const contenu = textarea.value.trim();

        if (contenu === '') return;

        fetch('{{ path('ajouter_commentaire') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({
                'postId': postId,
                'contenu': contenu
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.contenu) {
                const container = document.getElementById('commentaires-' + postId);
                const div = document.createElement('div');
                div.classList.add('border', 'rounded', 'p-2', 'mb-2');
                div.style.backgroundColor = '#4cc4d6';
               
                div.textContent = data.contenu;
                container.appendChild(div);
                textarea.value = ''; // Clear textarea
            } else {
                alert('Erreur lors de l‚Äôajout du commentaire');
            }
        })
        .catch(error => {
            console.error('Erreur AJAX :', error);
            alert('Erreur serveur');
        });
    }
</script>
<script>
    function modifierCommentaire(id, contenuActuel) {
        const nouveauContenu = prompt("Modifier le commentaire :", contenuActuel);
        if (nouveauContenu !== null && nouveauContenu.trim() !== "") {
            fetch(`/commentaire/${id}/edit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: new URLSearchParams({
                    'contenu': nouveauContenu
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Ou mettre √† jour dynamiquement le commentaire dans le DOM
                } else {
                    alert("Erreur lors de la modification");
                }
            });
        }
    }

    function supprimerCommentaire(id) {
        if (confirm("Voulez-vous vraiment supprimer ce commentaire ?")) {
            fetch(`/commentaire/${id}/delete`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Ou supprimer dynamiquement l'√©l√©ment du DOM
                } else {
                    alert("Erreur lors de la suppression");
                }
            });
        }
    }
</script>

{% endblock %}


